/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 avatar.glb 
*/

import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useRef, useEffect } from 'react'
import { useFBX, useAnimations } from '@react-three/drei'

export function Avatar(props) {
  const { animation } = props;
  const { scene } = useGLTF('../public/models/avatar.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const group = useRef();

  const { animations: typingAnimation } = useFBX("../public/animations/Typing.fbx");
  const { animations: wavingAnimation } = useFBX("../public/animations/Waving.fbx");

  typingAnimation[0].name="Typing";
  wavingAnimation[0].name="Waving";

  const { actions } = useAnimations([typingAnimation[0], wavingAnimation[0]], group);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => {
      actions[animation].reset().stop();
    }
  }, [animation])

  return (
    <group {...props} ref={group} dispose={null}>
      <group rotation={[0, Math.PI / 2, 0]} position={[.37,-.25,.25]} scale={0.004}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh geometry={nodes.mesh_3.geometry} material={materials.Color_} skeleton={nodes.mesh_3.skeleton} />
        <skinnedMesh geometry={nodes.mesh_5.geometry} material={materials.Color_} skeleton={nodes.mesh_5.skeleton} />
        <skinnedMesh geometry={nodes.mesh_6.geometry} material={nodes.mesh_6.material} skeleton={nodes.mesh_6.skeleton} />
        <skinnedMesh geometry={nodes.mesh_7.geometry} material={materials.Color_} skeleton={nodes.mesh_7.skeleton} />
        <skinnedMesh geometry={nodes.mesh_8.geometry} material={materials.Glass} skeleton={nodes.mesh_8.skeleton} />
        <skinnedMesh geometry={nodes.mesh_9.geometry} material={materials.Color_} skeleton={nodes.mesh_9.skeleton} />
        <skinnedMesh geometry={nodes.mesh_10.geometry} material={nodes.mesh_10.material} skeleton={nodes.mesh_10.skeleton} />
        <skinnedMesh geometry={nodes.mesh_11.geometry} material={materials.Color_} skeleton={nodes.mesh_11.skeleton} />
        <skinnedMesh geometry={nodes.mesh_12.geometry} material={nodes.mesh_12.material} skeleton={nodes.mesh_12.skeleton} />
        <skinnedMesh geometry={nodes.mesh_13.geometry} material={materials.Color_} skeleton={nodes.mesh_13.skeleton} />
        <skinnedMesh name="mesh_0" geometry={nodes.mesh_0.geometry} material={nodes.mesh_0.material} skeleton={nodes.mesh_0.skeleton} morphTargetDictionary={nodes.mesh_0.morphTargetDictionary} morphTargetInfluences={nodes.mesh_0.morphTargetInfluences} />
        <skinnedMesh name="mesh_1" geometry={nodes.mesh_1.geometry} material={materials.InsideMouth} skeleton={nodes.mesh_1.skeleton} morphTargetDictionary={nodes.mesh_1.morphTargetDictionary} morphTargetInfluences={nodes.mesh_1.morphTargetInfluences} />
        <skinnedMesh name="mesh_2" geometry={nodes.mesh_2.geometry} material={materials.Teeth} skeleton={nodes.mesh_2.skeleton} morphTargetDictionary={nodes.mesh_2.morphTargetDictionary} morphTargetInfluences={nodes.mesh_2.morphTargetInfluences} />
        <skinnedMesh name="mesh_4" geometry={nodes.mesh_4.geometry} material={materials.BlackShiny} skeleton={nodes.mesh_4.skeleton} morphTargetDictionary={nodes.mesh_4.morphTargetDictionary} morphTargetInfluences={nodes.mesh_4.morphTargetInfluences} />
      </group>
    </group>
  )
}

useGLTF.preload('/avatar.glb')
